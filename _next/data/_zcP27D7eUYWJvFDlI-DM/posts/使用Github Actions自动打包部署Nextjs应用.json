{"pageProps":{"postData":{"id":"使用Github Actions自动打包部署Nextjs应用","contentHtml":"<p>打包部署博客是一个重复机械的劳动，因此我想到使用 <strong>Github Actions</strong> 自动化整个流程。虽然有各种现成的Actions仓库，但对于第一次使用的我来说还是遇到了一些问题，在此记录一下。</p>\n<p><strong>目标</strong></p>\n<ul>\n<li>自动部署NextJS应用到Github Pages</li>\n<li>源代码提交在私有仓库中，打包推送到username.github.io公开仓库</li>\n<li>私有仓库main分支上的push操作触发action</li>\n</ul>\n<p><strong>创建actions</strong></p>\n<p>在项目根目录中新建<code>.github/workflows</code>目录，并新建deploy.yml相应操作代码在该文件中编写，GitHub会执行workflows目录下的所有文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-7290.c04546.webp\" alt=\"\"></p>\n<p><strong>使用到的Actions仓库</strong></p>\n<p><a href=\"https://github.com/peaceiris/actions-gh-pages\">actions-gh-pages</a></p>\n<p>该仓库中包含不同框架项目的使用示例</p>\n<p>⭐️ React and Next</p>\n<pre><code>name: GitHub Pages\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - main\r\n  pull_request:\r\n\r\njobs:\r\n  deploy:\r\n    runs-on: ubuntu-22.04\r\n    permissions:\r\n      contents: write\r\n    concurrency:\r\n      group: ${{ github.workflow }}-${{ github.ref }}\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Setup Node\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: '14'\r\n\r\n      - name: Get yarn cache\r\n        id: yarn-cache\r\n        run: echo \"YARN_CACHE_DIR=$(yarn cache dir)\" >> \"${GITHUB_OUTPUT}\"\r\n\r\n      - name: Cache dependencies\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ${{ steps.yarn-cache.outputs.YARN_CACHE_DIR }}\r\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-yarn-\r\n\r\n      - run: yarn install --frozen-lockfile\r\n      - run: yarn build\r\n      - run: yarn export\r\n\r\n      - name: Deploy\r\n        uses: peaceiris/actions-gh-pages@v3\r\n        if: ${{ github.ref == 'refs/heads/main' }}\r\n        with:\r\n          github_token: ${{ secrets.GITHUB_TOKEN }}\r\n          publish_dir: ./out\n</code></pre>\n<p>上述示例实现打包NextJS应用到运行此action的仓库中，默认推送到gh-pages分支（通过publish_branch选项修改推送分支）。</p>\n<p>因此实现推送到其他仓库需要修改部分代码</p>\n<pre><code>      - name: Deploy\r\n        uses: peaceiris/actions-gh-pages@v3\r\n        with:\r\n          personal_token: ${{ secrets.PERSONAL_TOKEN }}\r\n          external_repository: username/username.github.io\r\n          publish_branch: main\r\n          publish_dir: ./out // 推送该指定目录下的文件\r\n          commit_message: ${{ github.event.head_commit.message }}\n</code></pre>\n<ul>\n<li><code>personal_token</code> 个人令牌</li>\n<li><code>external_repository</code> 其他仓库的地址</li>\n<li><code>publish_dir</code> 推送该目录下的文件</li>\n<li><code>commit_message</code> 自定义commit信息</li>\n</ul>\n<p>注意<code>GITHUB TOKEN</code>没有访问外部存储库的权限。请创建一个个人访问令牌，并将其设置为secrets，如<code>personal_token: ${{ secrets.PERSONAL_TOKEN }}</code>。</p>\n<p><strong>创建个人令牌</strong></p>\n<ul>\n<li>点击github页面右上角的个人头像，点击Settings</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-6532.3bbea5.webp\" alt=\"\"></p>\n<ul>\n<li>点击Developer settings</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-3950.aca4dd.webp\" alt=\"\"></p>\n<ul>\n<li>选择页面右下角的Tokens(classic)，点击Generate new token(classic)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-7333.68b538.webp\" alt=\"\"></p>\n<ul>\n<li>填写备注信息，选择有效时长，<strong>勾选repo</strong>，然后点击下方的Generate token按钮，生成token并复制</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-4107.c474f1.webp\" alt=\"\"></p>\n<p><strong>将生成的个人令牌绑定到项目的secrets</strong></p>\n<ul>\n<li>打开运行action的仓库，依次点击Settings->Actions-> New repository secret</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-4506.428fe9.webp\" alt=\"\"></p>\n<ul>\n<li>Name输入<code>personal_token</code>，Secret粘贴生成的个人令牌，点击Add secret</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-7782.8ec4d7.webp\" alt=\"\"></p>\n<p>通过上面的配置，我们就可以在action中通过<code>${{ secrets.PERSONAL_TOKEN }}</code>访问到个人令牌</p>\n<p>最后将新建的<code>deploy.yml</code>文件提交推送到远程仓库，就会自动触发action执行，构建打包我们的NextJS应用并推送到<code>external_repository</code>对应仓库的<code>publish_branch</code>对应的分支中</p>\n<p>可以在仓库的Actions中查看action的执行过程，完成后打开GitHub Pages对应的仓库就能看到新提交的代码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shimiyzhang/blog-image/images/23-02-26/clipboard-6478.66382d.webp\" alt=\"\"></p>\n<p>以上就是本文的全部内容，感谢阅读。</p>\n","title":"使用Github Actions自动打包部署NextJS应用","date":"2023-02-25"}},"__N_SSG":true}